grammar net.mindengine.galen.SpecLang // with org.eclipse.xtext.common.Terminals
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore
//import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
generate specLang "http://www.mindengine.net/galen/SpecLang"

Model:
//(definitionImports+=SpecFileRef)*
	WS? NL?
	DEF_SEPERATOR WS?NL
	(definitions+=Definition)+ 
	DEF_SEPERATOR WS? NL
	WS? NL?
	(expectationImports+=SpecFileRef)* 
	(expectations+=Expectation)*;

Definition:
	NL? placeholder=ID WS selectorType=SelectorType WS selectorValue=SelectorValue NL;


SpecFileRef:
	PROCESSOR_STATEMENT filename=ID '.spec';

SelectorValue:
	XPATH_SELECTOR | CSS_SELECTOR | ID_SELECTOR;

Expectation:
	EXPECTATION_STATEMENT WS ((label=(TEXT_LABEL | '^') WS? '|' WS )? {Expectation} ('*' | (tags+=Tags (',' WS tags+=Tags)*))) WS? NL
	SPEC_SEPERATOR WS? NL
	(sections+=Section)+ WS?;
	
Section:
	placeholderRef=ID WS? NL
	(specs+=TestSpec)+;

TestSpec:
	WS TestSpecType WS? NL;

SelectorType:
	('css' | 'xpath' | 'id');
	
TestSpecType:
	{TestSpecType} 
	('near:'| 'below:' | 'above:' |  ('width:' | 'height:') size=Size | 
	'aligned:' | 'text:' | 'center:' | 
	'visible' | 'absent' | 
	'inside' (WS 'partly')?':' WS container=Element WS position+=Position (',' WS position+=Position)* |
	'contains' WS ('partly')?':'WS child=Element (','WS ID)* |
	'on'(WS ('top left'|'bottom left'|'top right'|'bottom right'))?':' | 
	'component:' | 
	'color scheme:');
	
Element:
	 'screen' | 'viewport' | ID
;

Position:
	(INT WS 'to' WS)? INT+ WS? 'px' WS Placement
;
Placement:
	( 'top' | 'bottom' | 'left' | 'right' ) (WS ( 'top' | 'bottom' | 'left' | 'right' ) )?
;

Tags:
	ID
;

Size:
	{Size} 
	WS ( ('<'|'>')? (INT WS 'to' WS)? INT+ (WS? 'px' |  '%' WS  ('of' WS reference=Element ('/height'|'/width'))?))
;

terminal EXPECTATION_STATEMENT:
	'@'
;

terminal PROCESSOR_STATEMENT:
	'@@'
;
	
terminal DEF_SEPERATOR:
	'='+
;	

terminal SPEC_SEPERATOR:
	'-'+
;

terminal ID_SELECTOR:
	'id' ID;

terminal XPATH_SELECTOR:
	'//' ID;

terminal CSS_SELECTOR:
	('#') ID | ('.') ID | (':') ID | ('*') ID | ('a'..'z' | 'A'..'Z')+;

terminal INT returns ecore::EInt:
	('-')? ('0'..'9')+;

terminal ID:
	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '-' | '*' | '0'..'9')*;

terminal TEXT_LABEL:
	(ID)( ID | ' ' | '.' | '!' | '?' | ',' )+;
	 
terminal fragment WS_F:
	 (" ");

terminal WS:
	 (WS_F|'\t')+;

terminal SL_COMMENT 	: '#';

// New line on DOS or Unix
terminal NL: 
	('\r'? '\n')+;

